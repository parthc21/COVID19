{"version":3,"sources":["Navigation/Navigation.module.css","DetailForm/detailForm.module.css","Questionaire/Questionaire.module.css","Questionaire/Question/Question.module.css","symbol.png","DetailForm/detailFormEvent.js","Navigation/Navigation.js","DetailForm/DetailComponent/DetailComponent.js","DetailForm/detailForm.js","Questionaire/Question/Question.js","Questionaire/Questionaire.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["module","exports","detailEvent","hasUserSubmit$","Subject","hasUserSubmitObs$","asObservable","sethasUserSubmit","state","next","CustomNavbar","props","useTranslation","t","i18n","handleClick","lang","changeLanguage","Navbar","className","styles","navbarColor","variant","Brand","alt","src","require","width","height","hasUserSubmit","Button","navbarButton","onClick","bg","fixed","DetailComp","formik","useFormik","initialValues","firstName","lastName","gender","temperature","address","district","village","onSubmit","values","Form","detailForm","handleSubmit","Row","Group","as","Col","Label","Control","id","name","type","placeholder","onChange","handleChange","value","getSelectedState","stateData","districtDisplay","detailFormButton","selectedState","selectedDistricts","selectedGender","stateValue","target","setState","districtData","states","filter","districts","map","key","console","log","getSelectedGender","genderValue","onClickSubmit","this","Component","Question","buttonValue","indexOfQuestion","onClickingNext","onClickingBack","question","column","answers","answer","index1","Check","label","Questionaire","prevState","ProgressBar","now","questionaireBody","App","subscribe","showModule","Boolean","window","location","hostname","match","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","backend","loadPath","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b7f0bcbe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarColor\":\"Navigation_navbarColor__3RT9g\",\"navbarButton\":\"Navigation_navbarButton__3QOL4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"detailForm\":\"detailForm_detailForm__2ZtWg\",\"detailFormButton\":\"detailForm_detailFormButton__2whln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionaireBody\":\"Questionaire_questionaireBody__1EEdd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"question\":\"Question_question__1tkyD\"};","module.exports = __webpack_public_path__ + \"static/media/symbol.932aba66.png\";","import {Subject} from 'rxjs';\r\n\r\nexport class detailEvent{\r\n    static hasUserSubmit$ = new Subject();\r\n\r\n    static hasUserSubmitObs$ = detailEvent.hasUserSubmit$.asObservable();\r\n    \r\n    static sethasUserSubmit = state=>detailEvent.hasUserSubmit$.next(state);\r\n} ","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport styles from './Navigation.module.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {detailEvent} from '../DetailForm/detailFormEvent'\r\n\r\nfunction CustomNavbar(props){\r\n\r\n  const { t, i18n } = useTranslation();\r\n\r\n  function handleClick(lang){\r\n    i18n.changeLanguage(lang);\r\n  }\r\n\r\n  function goBackHome(){\r\n    detailEvent.sethasUserSubmit(false);\r\n  }\r\n\r\n  return(\r\n      <>\r\n        <Navbar className={styles.navbarColor+' d-flex justify-content-between'} variant=\"light\">\r\n          <Navbar.Brand>\r\n            <img\r\n              alt=\"\"\r\n              src={require(\"../symbol.png\")}\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-inline-block align-top\"\r\n            />{' '}\r\n            {t('Heading.covid')}\r\n          </Navbar.Brand>\r\n        <div>\r\n          {props.hasUserSubmit?<Button className={styles.navbarButton} onClick={()=>goBackHome()}>Home</Button>:''}\r\n          <Button className={styles.navbarButton} onClick={()=>handleClick('en')}>\r\n            English\r\n          </Button>\r\n          <Button className={styles.navbarButton} onClick={()=>handleClick('hi')}>\r\n            Hindi\r\n          </Button>\r\n        </div>\r\n        </Navbar>\r\n        <Navbar variant=\"dark\" bg=\"light\" fixed=\"bottom\">\r\n            copyrights\r\n        </Navbar>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default CustomNavbar;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport styles from '../detailForm.module.css';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useFormik} from 'formik';\r\nimport {detailEvent} from '../detailFormEvent';\r\n\r\nfunction DetailComp(props){\r\n    const {t}= useTranslation();\r\n\r\n    const formik= useFormik({\r\n        initialValues:{\r\n            firstName:'',\r\n            lastName:'',\r\n            gender:'',\r\n            temperature:'',\r\n            address:'',\r\n            state:'',\r\n            district:'',\r\n            village:''\r\n        },\r\n        onSubmit: values => {\r\n            detailEvent.sethasUserSubmit(true);\r\n        },\r\n    })\r\n    return (\r\n        <Form className={styles.detailForm} onSubmit={formik.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col}>\r\n                    <Form.Label>{t('DetailForm.FName')}</Form.Label>\r\n                    <Form.Control id=\"firstName\" name=\"firstName\" type=\"text\" placeholder={t('DetailForm.FName')} onChange={formik.handleChange} value={formik.values.firstName}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col}>\r\n                    <Form.Label>{t('DetailForm.LName')}</Form.Label>\r\n                    <Form.Control type=\"text\" id=\"lastName\" name=\"lastName\" placeholder={t('DetailForm.LName')} onChange={formik.handleChange} value={formik.values.lastName}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col}>\r\n                    <Form.Label>{t('DetailForm.Gender')}</Form.Label>\r\n                    <Form.Control id=\"gender\" name=\"gender\" as=\"select\" onChange={formik.handleChange} value={formik.values.gender}>\r\n                        <option>Choose...</option>\r\n                        <option>{t('DetailForm.Male')}</option>\r\n                        <option>{t('DetailForm.Female')}</option>\r\n                        <option>{t('DetailForm.Other')}</option>\r\n                    </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col}>\r\n                    <Form.Label>{t('DetailForm.Temperature')}</Form.Label>\r\n                    <Form.Control id=\"temperature\" name=\"temperature\" type=\"text\" placeholder={t('DetailForm.Temperature')} onChange={formik.handleChange} value={formik.values.temperature}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Group >\r\n                    <Form.Label>{t('DetailForm.Address')}</Form.Label>\r\n                    <Form.Control id=\"address\" name=\"address\" placeholder=\"1234 Main St\" onChange={formik.handleChange} value={formik.values.address} />\r\n                </Form.Group>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col}>\r\n                    <Form.Label>{t('DetailForm.State')}</Form.Label>\r\n                    <Form.Control id=\"state\" name=\"state\" as=\"select\" \r\n                                onChange={value=>{\r\n                                                    props.getSelectedState(value);\r\n                                                    formik.handleChange(value);\r\n                                                }} \r\n                                value={formik.values.state}>\r\n                        <option>Choose...</option>\r\n                        {props.stateData}\r\n                    </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col}>\r\n                    <Form.Label>{t('DetailForm.District')}</Form.Label>\r\n                    <Form.Control id=\"district\" name=\"district\" as=\"select\" onChange={formik.handleChange} value={formik.values.district}>\r\n                        <option>Choose...</option>\r\n                        {props.districtDisplay}\r\n                    </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col}>\r\n                    <Form.Label>{t('DetailForm.Village')}</Form.Label>\r\n                    <Form.Control id=\"village\" name=\"village\" type=\"text\" placeholder=\"Town/Village\" onChange={formik.handleChange} value={formik.values.village}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Button className={styles.detailFormButton} type=\"submit\"variant=\"primary\">\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n    )\r\n}\r\n\r\nexport default DetailComp;","import React, { Component } from 'react';\r\nimport states from '../States/states.json';\r\nimport { detailEvent } from './detailFormEvent';\r\nimport DetailComp from './DetailComponent/DetailComponent';\r\n\r\n\r\nclass detailForm extends Component {\r\n    \r\n    state={\r\n        selectedState:'',\r\n        selectedDistricts:'',\r\n        districtDisplay:[],\r\n        selectedGender:''\r\n    }\r\n    componentWillMount(){\r\n    }\r\n\r\n    getSelectedState=(value)=>{\r\n        const stateValue= value.target.value\r\n        this.setState({\r\n            selectedState:value.target.value\r\n        });\r\n        const districtData= states.states.filter(state => (state.name===stateValue))[0].districts.map(district=>{\r\n            return(\r\n            <option key={district.id} value={district.name}>{district.name}</option>\r\n            )\r\n        });\r\n        this.setState({\r\n            districtDisplay:districtData\r\n        })\r\n        console.log(districtData,'district data');\r\n    }\r\n\r\n    getSelectedGender=(value)=>{\r\n        const genderValue = value.target.value;\r\n        this.setState({\r\n            selectedGender:genderValue\r\n        });\r\n        console.log(this.state.selectedGender);\r\n    }\r\n\r\n    onClickSubmit=()=>{\r\n        detailEvent.sethasUserSubmit(true);\r\n    }\r\n\r\n    render(){\r\n\r\n        const stateData =states.states.map(state=>{\r\n                return(\r\n                <option key={state.id} value={state.name}>{state.name}</option>\r\n                )\r\n            }) \r\n        return(\r\n            <DetailComp stateData={stateData}\r\n                        onClickSubmit={this.onClickSubmit}\r\n                        getSelectedGender={this.getSelectedGender}\r\n                        getSelectedState={this.getSelectedState}\r\n                        districtDisplay={this.state.districtDisplay}\r\n                        selectedDistricts={this.state.selectedDistricts}\r\n                        selectedState={this.state.selectedState}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default detailForm;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport styles from './Question.module.css'\r\nimport {useTranslation} from 'react-i18next';\r\n\r\nfunction Question(props){\r\n    const {t} =useTranslation();\r\n\r\n    const questions=[\r\n        {\r\n            question:\"Have you returned from any of the countries listed on Coronavirus FAQs within the last 14 days?\",\r\n            answers:[\"Yes\",\"No\"]\r\n        },\r\n        {\r\n            question:\"Have you had close contact with or cared for someone diagnosed with COVID-19 within the last 14 days?\",\r\n            answers:[\"Yes\",\"No\"]\r\n        },\r\n        {\r\n            question:\"Have you travelled inter-state in last 1 month?\",\r\n            answers:[\"Yes\",\"No\"]\r\n        },\r\n        {\r\n            question:\"Are you experiencing any of these symptoms?\",\r\n            answers:[\"Fever\",\"Cough\",\"DifficultyInBreathe\", \"None\"]\r\n        }\r\n    ]\r\n\r\n    let buttonValue='';\r\n\r\n    if(props.indexOfQuestion===0){\r\n        buttonValue=<Button variant=\"primary\" onClick={props.onClickingNext}>Next</Button>\r\n    }\r\n    else{\r\n        buttonValue=<><Button variant=\"primary\" onClick={props.onClickingBack}>\r\n                        Back\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={props.onClickingNext}>Next</Button></>\r\n    }\r\n    return(\r\n        <div className={styles.question}>\r\n            <Form>\r\n            <Form.Label as=\"legend\" column className=\"d-flex justify-content-start\">\r\n                {/* <h4>{props.indexOfQuestion+1}. {questions[props.indexOfQuestion].question} </h4> */}\r\n                <h4>{props.indexOfQuestion+1}. {t(`Question${props.indexOfQuestion+1}.question`)} </h4>\r\n            </Form.Label>\r\n            <Form.Group as={Row}>\r\n                <Col>\r\n                {questions[props.indexOfQuestion].answers.map((answer,index1)=>(\r\n                    <Form.Check\r\n                    type=\"radio\"\r\n                    label={t(`Question${props.indexOfQuestion+1}.${answer}`)}\r\n                    name=\"formHorizontalRadios\"\r\n                    id=\"formHorizontalRadios1\"\r\n                    className=\"d-flex justify-content-start\"\r\n                    key={index1}\r\n                    />\r\n                ))}\r\n                </Col>\r\n            </Form.Group>\r\n            <div className=\"d-flex justify-content-between\">\r\n                {buttonValue}\r\n            </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question;","import React, { Component } from 'react';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport styles from './Questionaire.module.css';\r\nimport Question from './Question/Question'\r\n\r\nclass Questionaire extends Component{\r\n    state={\r\n        indexOfQuestion:0\r\n    }\r\n    onClickingNext=()=>{\r\n        this.setState(prevState=>({\r\n            indexOfQuestion:prevState.indexOfQuestion++\r\n        }));\r\n    }\r\n    onClickingBack=()=>{\r\n        if(this.state.indexOfQuestion>0){\r\n            this.setState(prevState=>({\r\n                indexOfQuestion:prevState.indexOfQuestion--\r\n            }));\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n            <ProgressBar now={(this.state.indexOfQuestion+1)*100/4} className={styles.questionaireBody}/>\r\n            <Question indexOfQuestion={this.state.indexOfQuestion} onClickingNext={this.onClickingNext}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Questionaire;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navigation/Navigation'\nimport DetailForm from './DetailForm/detailForm';\nimport Questionaire from './Questionaire/Questionaire'\nimport { detailEvent } from './DetailForm/detailFormEvent';\n\nclass App extends Component {\n\n  state={\n    hasUserSubmit:false\n  }\n  constructor(props){\n    super(props);\n    detailEvent.hasUserSubmitObs$\n      .subscribe((state)=>{\n        this.setState({\n          hasUserSubmit:state\n        });\n      })\n  }\n\n  render(){\n    let showModule = this.state.hasUserSubmit?<Questionaire/>:<DetailForm/>\n    return (\n      <div className=\"App\">\n        <Navbar hasUserSubmit={this.state.hasUserSubmit}></Navbar>\n        {showModule}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport Backend from 'i18next-http-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\n// not like to use this?\r\n// have a look at the Quick start guide \r\n// for passing in lng and translations on init\r\n\r\nconst Language=['en', 'hi']\r\n\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: 'en',\r\n    debug: true,\r\n    whitelist:Language,\r\n    backend: {\r\n        loadPath: '/locales/{{lng}}/{{ns}}.json',\r\n    },\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    }\r\n  });\r\n\r\n\r\nexport default i18n;","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './i18n'\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <Suspense fallback=\"loading\">\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}